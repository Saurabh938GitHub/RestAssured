- API: application programming interface which acts as a bridge between client(front end) and server (back end)

- End point: Address where API is hosted on the Server.

- HTTP methods which are commonly used to communicate with Rest APIâ€™s are: GET, POST, PUT, and DELETE (CRUD operations)

- GET http method: The GET method is used to extract information from the given server using a given URI. While using GET request, it should only extract     data and should have no other effect on the data. No Payload/Body required
How to send input data in GET?
Ans: Using Query Parameters

- POST http method: A POST request is used to send data to the server, for example, customer information, file upload, etc. using HTML forms.
How to send input data in POST?
Ans: Using Form Parameters /Body Payload

- PUT http method: Replaces all current representations of the target resource with the uploaded content.

- DELETE http method: Removes all current representations of the target resource given by a URI.


- End Point Request URL can be constructed as below: Base URL/resource/(Query/Path)Parameters

- Resources: Resources represent API/Collection which can be accessed from the Server like for google its maps/images/search

- Path Parameters: Path parameters are variable parts of a URL path. They are typically used to point to a specific resource within a collection, such as a user identified by ID
Example: https://amazon.com/orders/1123343 --  here 'https://amazon.com/' is server, 'orders' is resource and '1123343' is path parameter/specific order

- Query Parameters: Query Parameter is used to sort/filter the resources. Query Parameters are identified with '?'
Example: https://amazon.com/orders?sort_by=2/20/2020 --  here 'https://amazon.com/' is server, 'orders' is resource and 'sort_by=2/20/2020' is query parameter

- Headers/Cookies: Headers represent the meta-data associated with the API request and response. In layman terms, we were sending Additional details to API to process our request.
Example : Authorization details

- Rest Assured: Java based library used to test restful web services/apis.

- Rest Assured has three main methods:
  given()- it takes all inputs like queryParam(), header(), body()
  when()- it submits the API by taking resource and http method type like POST
  then()- validates the response with methods like assertThat(), header(), body()

- Extract response as string: String response= .then().extract().response().asString();

- To Parse extracted response as JSON: JsonPath class. his class takes a string input and converts it into Json.
  String response= .then().extract().response().asString();
  JsonPath js= new JsonPath(response);
  String placeId= js.getString("place_id"); 

- .body(new String(Files.readAllBytes(Paths.get("C:\\Users\add.json"))))
  this is a way of providing body stored in a file add.json at a place in system where 'Files.readAllBytes' method  takes the path in form of Path class and reads it in bytes and then that is converted into string using new String()

- my jira auth token: ATATT3xFfGF0pYBfUhdNtnAH-k3Wt9rc6QywtwPMeVUqKmEocPwxkdoT797CwrlWQGoUYzF1Zvgd1blkMXz-zRMx2DHoGavkJ14SkXEcrc4GSQEq7lvHbdtpNfsRM6QI0SIAuH3e8_A7zfP62IRBR5baaBToNnb5rTNQCLowI2SzyC4n9tmz0PE=C6CD36FF

OTM4c2F1cmF2QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBwWUJmVWhkTnRuQUgtazNXdDlyYzZReXd0d1BNZVZVcUttRW9jUHd4a2RvVDc5N0N3cmxXUUdvVVl6RjFadmdkMWJsa01Yei16Uk14MkRIb0dhdmtKMTRTa1hFY3JjNEdTUUVxN2x2SGJkdHBOZnNSTTZRSTBTSUF1SDNlOF9BN3pmUDYySVJCUjViYWFCVG9ObmI1clROUUNMb3dJMlN6eUM0bjl0bXowUEU9QzZDRDM2RkY=

- Basic auth: authentication using bearer-token in BASE64 encoding. User needs to generate a bearer token for authenticating. It is done under header named Authorization.

-- when user wants to add any attachment/file, then use 'form-data' parameter of body with key as File 
   when user wants to add some generic text, use 'raw' parameter of body
   for automation, .multiPart() for attachment and .body() for generic text

-- O-Auth: internal server apis communication. here the internal apis secured with o-auth authorisation will need access token to get unlocked. that access token is provided by access/authorization server which first needs to verify whether relevant user/party is asking for access token or not. if not, it will deny, if yes, access token will be shared. this verification is done through grant type process. there are two grant type processes: client credential grant type and password grant type. Once access token is given using verification of these grant types, that access token can be user to hit and get response from apis secured with o-auth authorisation.
client credential grant type: client id , client secret (generally passed through form-data parameters in postman and .formParams() in rest assured)
password grant type: username, password


















